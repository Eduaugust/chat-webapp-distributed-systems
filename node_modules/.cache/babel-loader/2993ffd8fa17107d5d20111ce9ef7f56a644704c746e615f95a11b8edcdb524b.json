{"ast":null,"code":"class WebSocketClient {\n  constructor(url) {\n    this.ws = null;\n    this.listeners = [];\n    this.ws = new WebSocket(url);\n    this.ws.onmessage = event => {\n      try {\n        const message = JSON.parse(event.data);\n        this.listeners.forEach(listener => listener(message));\n      } catch (error) {\n        console.error('Erro ao processar a mensagem:', error);\n      }\n    };\n    this.ws.onerror = error => {\n      console.error('Erro na conexão WebSocket:', error);\n    };\n    this.ws.onclose = () => {\n      console.log('Conexão WebSocket fechada');\n    };\n  }\n  onMessage(callback) {\n    this.listeners.push(callback);\n  }\n  send(data) {\n    if (this.ws) {\n      this.ws.send(JSON.stringify(data));\n    } else {\n      console.error('WebSocket não está conectado.');\n    }\n  }\n  close() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n}\nexport default WebSocketClient;","map":{"version":3,"names":["WebSocketClient","constructor","url","ws","listeners","WebSocket","onmessage","event","message","JSON","parse","data","forEach","listener","error","console","onerror","onclose","log","onMessage","callback","push","send","stringify","close"],"sources":["/home/eduardo/repos/chat/chat-webapp/src/api/index.tsx"],"sourcesContent":["class WebSocketClient {\n  private ws: WebSocket | null = null;\n  private listeners: ((message: any) => void)[] = [];\n\n  constructor(url: string) {\n    this.ws = new WebSocket(url);\n\n    this.ws.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n        this.listeners.forEach((listener) => listener(message));\n      } catch (error) {\n        console.error('Erro ao processar a mensagem:', error);\n      }\n    };\n\n    this.ws.onerror = (error) => {\n      console.error('Erro na conexão WebSocket:', error);\n    };\n\n    this.ws.onclose = () => {\n      console.log('Conexão WebSocket fechada');\n    };\n  }\n\n  onMessage(callback: (message: any) => void) {\n    this.listeners.push(callback);\n  }\n\n  send(data: object) {\n    if (this.ws) {\n      this.ws.send(JSON.stringify(data));\n    } else {\n      console.error('WebSocket não está conectado.');\n    }\n  }\n\n  close() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n}\n\nexport default WebSocketClient;"],"mappings":"AAAA,MAAMA,eAAe,CAAC;EAIpBC,WAAWA,CAACC,GAAW,EAAE;IAAA,KAHjBC,EAAE,GAAqB,IAAI;IAAA,KAC3BC,SAAS,GAA+B,EAAE;IAGhD,IAAI,CAACD,EAAE,GAAG,IAAIE,SAAS,CAACH,GAAG,CAAC;IAE5B,IAAI,CAACC,EAAE,CAACG,SAAS,GAAIC,KAAK,IAAK;MAC7B,IAAI;QACF,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,IAAI,CAAC;QACtC,IAAI,CAACP,SAAS,CAACQ,OAAO,CAAEC,QAAQ,IAAKA,QAAQ,CAACL,OAAO,CAAC,CAAC;MACzD,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;IAED,IAAI,CAACX,EAAE,CAACa,OAAO,GAAIF,KAAK,IAAK;MAC3BC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD,CAAC;IAED,IAAI,CAACX,EAAE,CAACc,OAAO,GAAG,MAAM;MACtBF,OAAO,CAACG,GAAG,CAAC,2BAA2B,CAAC;IAC1C,CAAC;EACH;EAEAC,SAASA,CAACC,QAAgC,EAAE;IAC1C,IAAI,CAAChB,SAAS,CAACiB,IAAI,CAACD,QAAQ,CAAC;EAC/B;EAEAE,IAAIA,CAACX,IAAY,EAAE;IACjB,IAAI,IAAI,CAACR,EAAE,EAAE;MACX,IAAI,CAACA,EAAE,CAACmB,IAAI,CAACb,IAAI,CAACc,SAAS,CAACZ,IAAI,CAAC,CAAC;IACpC,CAAC,MAAM;MACLI,OAAO,CAACD,KAAK,CAAC,+BAA+B,CAAC;IAChD;EACF;EAEAU,KAAKA,CAAA,EAAG;IACN,IAAI,IAAI,CAACrB,EAAE,EAAE;MACX,IAAI,CAACA,EAAE,CAACqB,KAAK,CAAC,CAAC;MACf,IAAI,CAACrB,EAAE,GAAG,IAAI;IAChB;EACF;AACF;AAEA,eAAeH,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}