{"ast":null,"code":"var _jsxFileName = \"/home/eduardo/repos/chat/chat-webapp/src/components/WebSocketTest/index.tsx\",\n  _s = $RefreshSig$();\nimport { Socket } from 'net';\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WebSocketComponent() {\n  _s();\n  // Especifica que o estado 'messages' é um array de strings\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    // Substitua 'ws://localhost:8080' pelo endereço do seu servidor WebSocket\n    const s = new Socket();\n    s.connect(8080, 'localhost');\n    console.log('Conexão WebSocket aberta');\n    // Enviar uma mensagem para o servidor\n    s.write('/ None');\n    s.on('data', data => {\n      console.log('Mensagem recebida:', data.toString());\n      // Atualiza o estado corretamente, agora que 'messages' é um array de strings\n      setMessages(prevMessages => [...prevMessages, data.toString()]);\n    });\n    s.on('error', error => {\n      console.error('Erro na conexão WebSocket:', error);\n    });\n    s.on('close', () => {\n      console.log('Conexão WebSocket fechada');\n    });\n\n    //   const ws = new WebSocket('ws://localhost:8080');\n\n    //   ws.onopen = () => {\n    //     console.log('Conexão WebSocket aberta');\n    //     // Enviar uma mensagem para o servidor\n    //     ws.send('/ None');\n    //   };\n\n    //   ws.onmessage = (event) => {\n    //     console.log('Mensagem recebida:', event.data);\n    //     // Atualiza o estado corretamente, agora que 'messages' é um array de strings\n    //     setMessages((prevMessages) => [...prevMessages, event.data]);\n    //   };\n\n    //   ws.onerror = (error) => {\n    //     console.error('Erro na conexão WebSocket:', error);\n    //   };\n\n    //   ws.onclose = () => {\n    //     console.log('Conexão WebSocket fechada');\n    //   };\n\n    //   // Fechar a conexão WebSocket quando o componente for desmontado\n    //   return () => {\n    //     ws.close();\n    //   };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Mensagens Recebidas:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(WebSocketComponent, \"RyA59LRbn9goj/9N7rELX+NWNVI=\");\n_c = WebSocketComponent;\nexport default WebSocketComponent;\nvar _c;\n$RefreshReg$(_c, \"WebSocketComponent\");","map":{"version":3,"names":["Socket","React","useEffect","useState","jsxDEV","_jsxDEV","WebSocketComponent","_s","messages","setMessages","s","connect","console","log","write","on","data","toString","prevMessages","error","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","_c","$RefreshReg$"],"sources":["/home/eduardo/repos/chat/chat-webapp/src/components/WebSocketTest/index.tsx"],"sourcesContent":["import { Socket } from 'net';\nimport React, { useEffect, useState } from 'react';\n\nfunction WebSocketComponent() {\n  // Especifica que o estado 'messages' é um array de strings\n  const [messages, setMessages] = useState<string[]>([]);\n\n  useEffect(() => {\n    // Substitua 'ws://localhost:8080' pelo endereço do seu servidor WebSocket\n    const s = new Socket();\n\n    s.connect(8080, 'localhost');\n    console.log('Conexão WebSocket aberta');\n    // Enviar uma mensagem para o servidor\n    s.write('/ None');\n\n    s.on('data', (data) => {\n      console.log('Mensagem recebida:', data.toString());\n      // Atualiza o estado corretamente, agora que 'messages' é um array de strings\n      setMessages((prevMessages) => [...prevMessages, data.toString()]);\n    });\n\n    s.on('error', (error) => {\n      console.error('Erro na conexão WebSocket:', error);\n    });\n\n    s.on('close', () => {\n      console.log('Conexão WebSocket fechada');\n    });\n\n\n  //   const ws = new WebSocket('ws://localhost:8080');\n\n  //   ws.onopen = () => {\n  //     console.log('Conexão WebSocket aberta');\n  //     // Enviar uma mensagem para o servidor\n  //     ws.send('/ None');\n  //   };\n\n  //   ws.onmessage = (event) => {\n  //     console.log('Mensagem recebida:', event.data);\n  //     // Atualiza o estado corretamente, agora que 'messages' é um array de strings\n  //     setMessages((prevMessages) => [...prevMessages, event.data]);\n  //   };\n\n  //   ws.onerror = (error) => {\n  //     console.error('Erro na conexão WebSocket:', error);\n  //   };\n\n  //   ws.onclose = () => {\n  //     console.log('Conexão WebSocket fechada');\n  //   };\n\n  //   // Fechar a conexão WebSocket quando o componente for desmontado\n  //   return () => {\n  //     ws.close();\n  //   };\n  }, []);\n\n  return (\n    <div>\n      <h2>Mensagens Recebidas:</h2>\n      <ul>\n        {messages.map((message, index) => (\n          <li key={index}>{message}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default WebSocketComponent;"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,KAAK;AAC5B,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,kBAAkBA,CAAA,EAAG;EAAAC,EAAA;EAC5B;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAW,EAAE,CAAC;EAEtDD,SAAS,CAAC,MAAM;IACd;IACA,MAAMQ,CAAC,GAAG,IAAIV,MAAM,CAAC,CAAC;IAEtBU,CAAC,CAACC,OAAO,CAAC,IAAI,EAAE,WAAW,CAAC;IAC5BC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACvC;IACAH,CAAC,CAACI,KAAK,CAAC,QAAQ,CAAC;IAEjBJ,CAAC,CAACK,EAAE,CAAC,MAAM,EAAGC,IAAI,IAAK;MACrBJ,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEG,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;MAClD;MACAR,WAAW,CAAES,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEF,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC;IACnE,CAAC,CAAC;IAEFP,CAAC,CAACK,EAAE,CAAC,OAAO,EAAGI,KAAK,IAAK;MACvBP,OAAO,CAACO,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD,CAAC,CAAC;IAEFT,CAAC,CAACK,EAAE,CAAC,OAAO,EAAE,MAAM;MAClBH,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;IAC1C,CAAC,CAAC;;IAGJ;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;IACA;EACA,CAAC,EAAE,EAAE,CAAC;EAEN,oBACER,OAAA;IAAAe,QAAA,gBACEf,OAAA;MAAAe,QAAA,EAAI;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7BnB,OAAA;MAAAe,QAAA,EACGZ,QAAQ,CAACiB,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC3BtB,OAAA;QAAAe,QAAA,EAAiBM;MAAO,GAAfC,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAe,CAC9B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAACjB,EAAA,CAlEQD,kBAAkB;AAAAsB,EAAA,GAAlBtB,kBAAkB;AAoE3B,eAAeA,kBAAkB;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}