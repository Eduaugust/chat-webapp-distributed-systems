{"ast":null,"code":"import React,{createContext,useContext,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(null);export const useAuth=()=>{const context=useContext(AuthContext);if(context===null){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[isAuthenticated,setIsAuthenticated]=useState(false);const[isServersConnected,setIsServersConnected]=useState(false);const login=username=>setIsAuthenticated(username);const logout=()=>setIsAuthenticated(false);const setConnect=value=>setIsServersConnected(value);return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{isAuthenticated,login,logout,isServersConnected,setConnect},children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","jsx","_jsx","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","isAuthenticated","setIsAuthenticated","isServersConnected","setIsServersConnected","login","username","logout","setConnect","value","Provider"],"sources":["/home/eduardo/repos/chat/chat-webapp/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\n\nexport interface AuthContextType {\n  isAuthenticated: boolean | string;\n  login: (username: string) => void;\n  logout: () => void;\n  isServersConnected: boolean;\n  setConnect: (value: boolean) => void;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === null) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean | string>(false);\n  const [isServersConnected, setIsServersConnected] = useState<boolean>(false);\n\n  const login = (username: string) => setIsAuthenticated(username);\n  const logout = () => setIsAuthenticated(false);\n\n  const setConnect = (value: boolean) => setIsServersConnected(value);\n\n  return (\n    <AuthContext.Provider value={{ isAuthenticated, login, logout, isServersConnected, setConnect}}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,KAAmB,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAU9E,KAAM,CAAAC,WAAW,cAAGL,aAAa,CAAyB,IAAI,CAAC,CAE/D,MAAO,MAAM,CAAAM,OAAO,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAAAC,OAAO,CAAGN,UAAU,CAACI,WAAW,CAAC,CACvC,GAAIE,OAAO,GAAK,IAAI,CAAE,CACpB,KAAM,IAAI,CAAAC,KAAK,CAAC,6CAA6C,CAAC,CAChE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC,CAMD,MAAO,MAAM,CAAAE,YAAyC,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACpE,KAAM,CAACE,eAAe,CAAEC,kBAAkB,CAAC,CAAGX,QAAQ,CAAmB,KAAK,CAAC,CAC/E,KAAM,CAACY,kBAAkB,CAAEC,qBAAqB,CAAC,CAAGb,QAAQ,CAAU,KAAK,CAAC,CAE5E,KAAM,CAAAc,KAAK,CAAIC,QAAgB,EAAKJ,kBAAkB,CAACI,QAAQ,CAAC,CAChE,KAAM,CAAAC,MAAM,CAAGA,CAAA,GAAML,kBAAkB,CAAC,KAAK,CAAC,CAE9C,KAAM,CAAAM,UAAU,CAAIC,KAAc,EAAKL,qBAAqB,CAACK,KAAK,CAAC,CAEnE,mBACEhB,IAAA,CAACC,WAAW,CAACgB,QAAQ,EAACD,KAAK,CAAE,CAAER,eAAe,CAAEI,KAAK,CAAEE,MAAM,CAAEJ,kBAAkB,CAAEK,UAAU,CAAE,CAAAR,QAAA,CAC5FA,QAAQ,CACW,CAAC,CAE3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}